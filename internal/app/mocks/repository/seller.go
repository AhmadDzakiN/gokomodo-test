// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/repository/seller.go
//
// Generated by this command:
//
//	mockgen -source=internal/app/repository/seller.go -destination=internal/app/mocks/repository/seller.go
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	entity "gokomodo-assignment/internal/app/entity"
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "go.uber.org/mock/gomock"
)

// MockISellerRepository is a mock of ISellerRepository interface.
type MockISellerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockISellerRepositoryMockRecorder
}

// MockISellerRepositoryMockRecorder is the mock recorder for MockISellerRepository.
type MockISellerRepositoryMockRecorder struct {
	mock *MockISellerRepository
}

// NewMockISellerRepository creates a new mock instance.
func NewMockISellerRepository(ctrl *gomock.Controller) *MockISellerRepository {
	mock := &MockISellerRepository{ctrl: ctrl}
	mock.recorder = &MockISellerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISellerRepository) EXPECT() *MockISellerRepositoryMockRecorder {
	return m.recorder
}

// GetByEmail mocks base method.
func (m *MockISellerRepository) GetByEmail(ctx *gin.Context, email string) (entity.Seller, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmail", ctx, email)
	ret0, _ := ret[0].(entity.Seller)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmail indicates an expected call of GetByEmail.
func (mr *MockISellerRepositoryMockRecorder) GetByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmail", reflect.TypeOf((*MockISellerRepository)(nil).GetByEmail), ctx, email)
}

// GetByID mocks base method.
func (m *MockISellerRepository) GetByID(ctx *gin.Context, id string) (entity.Seller, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(entity.Seller)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockISellerRepositoryMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockISellerRepository)(nil).GetByID), ctx, id)
}
